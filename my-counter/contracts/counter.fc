#include "imports/stdlib.fc";

global int storage::value;

() storage::load() impure inline {
    var ds = get_data().begin_parse();
    storage::value = ds~load_uint32();
}

() storage::save() impure inline {
    set_data(begin_cell()
        .store_uint32(storage::value)
    .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    throw_if(35, in_msg_body.slice_bits() < 32);
    int n = in_msg_body~load_uint(32);

    storage::load();
    storage::value += n;
    storage::save();
}

int get_total() method_id {
    storage::load();
    return storage::value;
}
